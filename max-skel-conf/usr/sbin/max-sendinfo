#!/usr/bin/env python3
# -*- coding: UTF-8 -*-

import os
import sys
import datetime
import time
import simplejson as json
import urllib.request  # Cambio: se usa urllib.request en lugar de urllib2 en Python 3
import urllib.parse    # Cambio: se usa urllib.parse en lugar de urllib2 en Python 3
import base64
import logging
import uuid
from subprocess import Popen, PIPE, STDOUT
import subprocess

URL = "https://madridlinux.educa.madrid.org/stats/stats.php"
HEADERS = {'User-Agent': "MAX 11.0"}
VERBOSE = True

LOGGER_FILE = '/var/lib/max-sendinfo/sendinfo.log'
UUID_FILE = '/var/lib/max-sendinfo/uuid'
# add numbers to the end to force upload again
PENDING = '/var/lib/max-sendinfo/pending'

# Configuración del logger
if not os.access(LOGGER_FILE, os.W_OK) or "--debug" in sys.argv:
    lg = logging.getLogger('max-sendinfo')
    lg.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(asctime)s %(message)s')
    ch = logging.StreamHandler(sys.stdout)
    ch.setFormatter(formatter)
    lg.addHandler(ch)
else:
    logging.basicConfig(level=logging.DEBUG,
                        format='%(asctime)s %(message)s',
                        filename=LOGGER_FILE,
                        filemode='a')
    lg = logging.getLogger('max-sendinfo')


def sendRequest(data={}, method=None):
    local_indent = ''
    data = urllib.parse.urlencode(data).encode("utf-8")  # Cambio: se utiliza urllib.parse y codificación UTF-8
    req = urllib.request.Request(URL, data, HEADERS)     # Cambio: se utiliza urllib.request en lugar de urllib2.Request
    response = None
    raw = ""
    try:
        lg.debug("Pushing to (%s) ..." % (URL))
        raw = urllib.request.urlopen(req).read().decode("utf-8")  # Cambio: urllib.request.urlopen y decodificación UTF-8
    except Exception as err:
        lg.error("Exception loading API (%s), err=%s" % (URL, err))
        return response

    try:
        response = json.loads(raw)
    except Exception as err:
        lg.error("sendRequest() received raw\n")
        lg.error("="*80)
        lg.error(raw)
        lg.error("="*80)
    return response

def exe_cmd(cmd, verbose=True):
    bin = cmd.split(' ')[0]
    if not os.path.exists(bin):
        lg.error("exe_cmd(%s) bin no exists" % (cmd))
        return 'n/a'
    p = Popen(cmd, shell=True, bufsize=0, stdout=PIPE, stderr=STDOUT, close_fds=True)

    output = []
    for line in p.stdout.readlines():
        line = line.decode("utf-8").strip()  # Cambio: se decodifica cada línea de bytes a utf-8 y se elimina el salto de línea
        if line:
            output.append(line)
    if len(output) == 1:
        return output[0] if output[0] else 'n/a'
    elif len(output) > 1:
        if verbose:
            lg.info("exe_cmd(%s) %s" % (cmd, output))
        return "_".join(output)
    else:
        if verbose:
            lg.info("exe_cmd(%s)=None" % (cmd))
        return 'n/a'


def readfile(fname):
    if not os.path.exists(fname):
        return 'n/a'

    with open(fname, 'r') as fd:  # Cambio: uso de with para manejar el archivo de forma segura
        data = fd.readlines()
    temp = [line.rstrip('\n') for line in data]
    return "_".join(temp)


if __name__ == '__main__':
    # don't run if no pending file
    if not os.path.exists(PENDING):
        sys.exit(0)

    # id=[uniq UUID]
    # distro=[ Ubuntu or Debian with version ]
    # arch=[ i386 | amd64 ]
    # version=[ from sources.list max75 for ex ]

    # Generar siempre un nuevo UUID y comprobar la dirección MAC del equipo
    UID = str(uuid.uuid4())
    MAC_ADDRESS = subprocess.check_output("ip a | grep -e 'link/ether' | awk '{ print $2 }' | head -n 1", shell=True, text=True).strip()
    with open(UUID_FILE, 'w') as f:  # Se sobrescribe el archivo con un nuevo UUID
        f.write(f"{UID}\n")
        f.write(f"{MAC_ADDRESS}\n")

    DISTRO = exe_cmd('/usr/bin/lsb_release -s -i -r -c')  # Ubuntu_12.04_precise
    ARCH = exe_cmd('/usr/bin/dpkg-architecture -qDEB_HOST_ARCH')  # i386 o amd64
    VERSION = exe_cmd("/usr/bin/awk -F \"/| \" '/\/max/ {print $5;exit}' /etc/apt/sources.list")

    data = {
        'id':      UID,
        'distro':  DISTRO,
        'version': VERSION,
        'arch':    ARCH,
    }

    lg.debug(data)
    recv = sendRequest(data)
    lg.info(recv)
    if recv and 'msg' in recv and recv['msg'] == 'OK' and os.path.exists(PENDING):
        os.unlink(PENDING)
        lg.info("Delete pending file=%s" % (PENDING))

    sys.exit(0)
